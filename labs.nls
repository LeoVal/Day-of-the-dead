
;;;
;;;  Return a list of positions from initialPos to FinalPos
;;;  The returning list excludes the initialPos
;;;  If no path is found, the returning list is empty
;;;
to-report find-path [intialPos FinalPos]
  let opened 0
  let closed 0
  let aux 0
  let aux2 0
  let aux3 0
  let to-explore 0

  set to-explore []
  set closed []
  set opened []
  set opened fput (list (list 0 0 intialPos) []) opened

  while [not empty? opened]
  [
    set to-explore first opened
    set opened remove to-explore opened
    set closed fput to-explore closed

    ifelse last first to-explore = FinalPos
    [ report find-solution to-explore closed ]
    [ set aux adjacents to-explore FinalPos
      foreach aux
      [
        set aux2 ?
        set aux3 filter [ last first aux2 = last first ? and first first aux2 < first first ? ] opened
        ifelse not empty? aux3
        [ set opened remove first aux3 opened
          set opened fput aux2 opened ]
        [
          set aux3 filter [ last first aux2 = last first ? ] closed
          ifelse not empty? aux3
          [
            if first first first aux3 > first first aux2
              [ set closed remove first aux3 closed
                set opened fput aux2 opened ]
          ]
          [ set opened fput aux2 opened ]
        ]
      ]

      ;; orders the opened list according to the heuristic
      set opened sort-by [ first first ?1 < first first ?2 ] opened
    ]
  ]
  report []
end


to-report find-solution [node closed]
  let solution 0
  let parent 0

  set solution (list last first node)
  set parent item 1 node
  while [not empty? parent] [
    set parent first filter [ parent = first ? ] closed
    set solution fput last first parent solution
    set parent last parent
  ]

  report butfirst solution
end

;;;
;;;  Add the distance to the goal position and the current node cost
;;;
to-report heuristic [node mgoal]
  let cost 0
  let x 0
  let y 0

  set cost item 1 node
  set x first item 2 node
  set y first butfirst item 2 node

  report cost +
         2 * (abs(x - item 0 mgoal) +  abs(y - item 1 mgoal))
end

to-report adjacents [node mobjectivo]
  let aux 0
  let aux2 0

  set aux2 []
  set aux free-adjacent-positions (last first node)
  
  foreach aux [ set aux2 fput (list 0
                                  ((item 1 first node) + 1)
                                   ?)
                             aux2 ]
  set aux []
  foreach aux2
  [ set aux fput (list (replace-item 0 ? (heuristic ? mobjectivo))
                       first node)
                 aux ]
  report aux
end


to-report free-adjacent-positions [pos]
  let solution all-adjacent-positions pos

  foreach solution
  [ 
    let square read-map-position ?
    if (square = (word "" WALL) or square = (word "" ZOMBIE_SQUARE) or square = (word "" OCCUPIED))
    [ set solution remove ? solution ] ]
  
  report solution
end

to-report all-adjacent-positions [pos]
  let ssolution 0
  let x 0
  let y 0

  set x item 0 pos
  set y item 1 pos

  set ssolution []

  if (not (y <= (- MAP_WIDTH)))
    [ set ssolution fput (list x (y - 1)) ssolution ]

  if (not (y >= MAP_WIDTH))
    [ set ssolution fput (list x (y + 1)) ssolution ]

  if (not (x <= (- MAP_WIDTH)))
    [ set ssolution fput (list (x - 1) y) ssolution ]

  if (not (x >= MAP_WIDTH))
    [ set ssolution fput (list (x + 1) y) ssolution ]

report ssolution

end

to print-map
  let i 0

  set i 0
  repeat (2 * MAP_WIDTH + 1)
  [ show substring world-map (i * (2 * MAP_WIDTH + 1))
                        ((i + 1) * (2 * MAP_WIDTH + 1))
    set i i + 1]
end


;;;
;;; ------------------------
;;;   Actuators
;;; ------------------------
;;;

;;;
;;;  Rotate turtle to left
;;;
to rotate-left
  lt 90
  set last-action "rotate-left"
end

;;;
;;;  Rotate turtle to right
;;;
to rotate-right
  rt 90
  set last-action "rotate-right"
end

;;;
;;; ------------------------
;;;   Sensors
;;; ------------------------
;;;

;;;
;;;  Check if the cell ahead is a walkable floor (which means not a wall)
;;;
to-report free-cell?
  let frente (patch-ahead 1)
  let occupied-flag (([kind] of frente != WALL) and (not any? turtles-on frente))
  
  report occupied-flag
end

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;                                            ;;;
;;;           INTERNAL ABSTRACT TYPES          ;;;
;;;                                            ;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;
;;; -------------------------
;;;    Plan Intructions
;;; -------------------------
;;;
to-report build-instruction [ttype vvalue]
  report list ttype vvalue
end

to-report get-instruction-type [iinstruction]
  report first iinstruction
end

to-report get-instruction-value [iinstruction]
  report last iinstruction
end

to-report build-instruction-find-adjacent-position [aadjacent-position]
  report build-instruction "ad" aadjacent-position
end

to-report instruction-find-adjacent-position? [iinstruction]
  report get-instruction-type iinstruction = "ad"
end

to-report build-instruction-find-heading [hheading]
  report build-instruction "h" hheading
end

to-report instruction-find-heading? [iinstruction]
  report get-instruction-type iinstruction = "h"
end

to-report build-instruction-search []
  report build-instruction "s" ""
end

to-report instruction-search? [iinstruction]
  report get-instruction-type iinstruction = "s"
end

to-report build-instruction-hunt []
  report build-instruction "hunt" ""
end

to-report instruction-hunt? [iinstruction]
  report get-instruction-type iinstruction = "hunt"
end

;;;
;;; -------------------------
;;;    Plans
;;; -------------------------
;;;
to-report build-empty-plan
  report []
end

to-report add-instruction-to-plan [pplan iinstruction]
  report lput iinstruction pplan
end

to-report remove-plan-first-instruction [pplan]
  report butfirst pplan
end

to-report get-plan-first-instruction [pplan]
  report first pplan
end

to-report empty-plan? [pplan]
  report empty? pplan
end

;;;
;;; Build a plan to move the agent from posi to posf
;;;
to-report build-path-plan [posi posf]
  let newPlan 0
  let path 0

  set newPlan build-empty-plan
  set path (find-path posi posf)

  foreach path
    [ set newPlan add-instruction-to-plan newPlan build-instruction-find-adjacent-position ? ]

  report newPlan
end

;;;
;;; -------------------------
;;; Intention
;;;
;;; Chap.4 of [Wooldridge02]
;;; An intention is a list such as [desire position heading]
;;; -------------------------
;;;
to-report build-empty-intention
  report []
end

to-report build-intention [ddesire pposition hheading]
  let aux 0

  set aux list ddesire pposition
  set aux lput hheading aux
  report aux
end

to-report get-intention-desire [iintention]
  report item 0 iintention
end

to-report get-intention-position [iintention]
  report item 1 iintention
end

to-report get-intention-heading [iintention]
  report item 2 iintention
end

to-report empty-intention? [iintention]
  report empty? iintention
end

;;;
;;;  Return the heading that is required to have pos2 in front of a turtle that is currently in pos1
;;;
to-report calculate-heading [pos1 pos2]
  let x1 0
  let x2 0
  let y1 0
  let y2 0


  set x1 item 0 pos1
  set x2 item 0 pos2
  set y1 item 1 pos1
  set y2 item 1 pos2

  ifelse x1 = x2
  [ ifelse y1 > y2
    [report 180]
    [report 0]
  ]
  [ ifelse x1 > x2
    [report 270]
    [report 90]
  ]
end

;;;
;;; -------------------------
;;; Position
;;; -------------------------
;;;
to-report build-position [x y]
  report list x y
end

to-report xcor-of-position [pposition]
  report first pposition
end

to-report ycor-of-position [pposition]
  report last pposition
end

to-report equal-positions? [pos1 pos2]
  report ((xcor-of-position(pos1) = (xcor-of-position(pos2)))
          and (ycor-of-position(pos1) = (ycor-of-position(pos2))))
end

to-report position-ahead
  ifelse heading = 90
    [ report build-position
               ((xcor-of-position current-position) + 1)
               (ycor-of-position current-position) ]
    [ ifelse heading = 180
      [ report build-position
                  (xcor-of-position current-position)
                  ((ycor-of-position current-position) - 1) ]
      [ ifelse heading = 270
        [ report build-position
               ((xcor-of-position current-position) - 1)
               (ycor-of-position current-position) ]
        [ report build-position
                  (xcor-of-position current-position)
                  ((ycor-of-position current-position) + 1) ]
      ]
    ]
end

to-report patch-position [pos]
  report patch item 0 pos item 1 pos
end

to turn-to-position [ pos ]
  face patch-position pos
end

to turn-to-correct-heading [ hheading ]
  set heading hheading
end

;;;
;;; ----------------------------
;;;  Plan execution procedures
;;; ----------------------------
;;;

;;;
;;;  Execute the next action of the current plan
;;;
to execute-plan-action
  let currentInstruction 0

  set currentInstruction get-plan-first-instruction plan

  ; if at objective clear all ad and h instructions
  if (equal-positions? current-position item 1 intention)
    [
      set heading item 2 intention
      
      while [ instruction-find-adjacent-position? currentInstruction or instruction-find-heading? currentInstruction ]
      [ set plan remove-plan-first-instruction plan 
        set currentInstruction get-plan-first-instruction plan ]
    ]

  ; Ad instruction. this means move to adj position
  ifelse(instruction-find-adjacent-position? currentInstruction)
    [ 
      ifelse(position-ahead = get-instruction-value currentInstruction)
        [
          ifelse (free-cell?)
          [
            human-move-ahead
            set plan remove-plan-first-instruction plan
          ]
          [ set plan build-plan-for-intention intention ]
        ]
        [ turn-to-position get-instruction-value currentInstruction ]
      ]
      [ 
      ; find heading instruction. this means turn to the right direction
      ifelse(instruction-find-heading? currentInstruction)
        [
          ifelse(heading = get-instruction-value currentInstruction)
          [
            set plan remove-plan-first-instruction plan 
          ]
          [ turn-to-correct-heading get-instruction-value currentInstruction ]
        ]
        [
          ; search instruction. randomly moving to find zombie
          ifelse(instruction-search? currentInstruction)
          [
            set plan remove-plan-first-instruction plan
          ]
          [
          ; hunt instruction. try to kill the zombie here
              if(instruction-hunt? currentinstruction)
              [
                ifelse (zombies-ahead?)
                [
                  kill-zombie-ahead 
                  ifelse (zombies-ahead?)
                  [ 
                    set last-action "wait"
                  ]
                  [ set plan remove-plan-first-instruction plan ]
                ]
                [
                  if not ( (equal-positions? current-position item 1 intention) and (heading = item 2 intention))
                  ; reached a hunt instruction and not in the right place so we need to replan
                  [ set plan build-empty-plan ]
                ]
              ]
          ]
        ]
      ]
end

to rotate-best-ad [ rbtarget-pos ]
  let rbtarget-heading calculate-heading current-position rbtarget-pos
  rotate-best rbtarget-heading
end

to rotate-best [rbheading]
  ifelse( 360 - rbheading <= 180)
  [ rotate-right ]
  [ rotate-left ]
end

;;;
;;;  Check if the robot's intention has been achieved
;;;
to-report intention-succeeded? [iintention]
  let ddesire 0
  let target-zombie 0
  let iiposition item 1 iintention
  let iiheading item 2 iintention

  if(empty-intention? iintention)
    [ report false ]

  set ddesire get-intention-desire iintention
  if (ddesire = "search")
  [ report (equal-positions? current-position iiposition) or (member? word "" ZOMBIE_SQUARE world-map) ]

  if(ddesire = "hunt")
  [ 
    ifelse ((equal-positions? current-position iiposition) and (heading = iiheading))
    [
      ifelse(not any? zombies-on patch item 0 prey item 1 prey)
      [ report true ]
      [ report false ]
    ]
    [
      report false
    ]     
  ]

  report false
  
end


to-report impossible-intention? [iintention]
  if(empty-intention? iintention)
    [ report false ]
 

  if (item 0 iintention = "hunt") ;TODO. isto devia usar o mapa interno
  [  
    if (not any? zombies-on patch item 0 prey item 1 prey)
    [ report true ]
  ]
  
  report false
end